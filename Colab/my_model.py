# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lrpSQHUrWBpaoMRQb0gKTe749g-jyMh1
"""

import keras
from keras.src import backend
from keras.src import layers

'''
    ใช้สำหรับปรับแต่ง Model และเลือกใช้ Model ตามที่ต้องการ หากต้องการเพิ่มหรือลด Model ให้แก้ไขที่นี่
    Reference:  https://github.com/keras-team/keras/blob/v3.10.0/keras/src/applications/mobilenet_v3.py
                https://github.com/BBuf/Keras-Semantic-Segmentation/blob/master/Models/MobileNext.py

    Modify ล่าสุด 23/08/2025
'''

"Activation Function"
def relu(x):
    return layers.ReLU()(x)

def hard_sigmoid(x):
    return layers.ReLU(6.0)(x + 3.0) * (1.0 / 6.0)

def hard_swish(x):
    return layers.Activation("hard_swish")(x)

def depth(v, divisor=8, min_value=None):
    if min_value is None:
        min_value = divisor
    new_v = max(min_value, int(v + divisor / 2) // divisor * divisor)
    # Make sure that round down does not go down by more than 10%.
    if new_v < 0.9 * v:
        new_v += divisor
    return new_v

"Squeeze and Excitation Function"
def se_block(inputs, filters, se_ratio, prefix):
    x = layers.GlobalAveragePooling2D(
        keepdims=True, name=prefix + "squeeze_excite_avg_pool"
    )(inputs)
    x = layers.Conv2D(
        depth(filters * se_ratio),
        kernel_size=1,
        padding="same",
        name=prefix + "squeeze_excite_conv",
    )(x)
    x = layers.ReLU(name=prefix + "squeeze_excite_relu")(x)
    x = layers.Conv2D(
        filters,
        kernel_size=1,
        padding="same",
        name=prefix + "squeeze_excite_conv_1",
    )(x)
    x = hard_sigmoid(x)
    x = layers.Multiply(name=prefix + "squeeze_excite_mul")([inputs, x])
    return x

"My purpose method"
def sandglass_modify(x, outfilters, reduction, kernel_size, stride, se_ratio, activation, block_id, first=False, use_activation=True):
    '''
        Dwise + Activation => Projection Conv1x1 => Expansion Conv1x1 + Activation => SE (if use) => Dwise
        ฟังก์ชันนี้เป็นการผสมผสานระหว่าง Inverted Resdidual Block ใน MobilenetV3 และ Sandglass Block ใน MobileNeXt

        Parameters:
            x = Input tensor
            outfilters : Number of output filters.
            reduction : Reduction factor for bottleneck layer.
            kernel_size : Kernel size for depthwise convolution.
            stride : Stride for depthwise convolution (1).
            se_ratio : Ratio for squeeze-and-excitation block (0 < se_ratio <= 1).
            activation : Activation function.
            block_id : Unique ID for block (used in naming layers).
            first : Whether this is the first block in the sequence.
            use_activation : For first block if false activation none
    '''
    channel_axis = 1 if backend.image_data_format() == "channels_first" else -1
    shortcut = x
    infilters = x.shape[channel_axis]

    EPSILON_BN=1e-4
    MOMENTUM_BN=0.9

    if block_id:
        prefix = f"sandglass_{block_id}_"
    else:
        prefix = "sandglass_"

    '''
        สำหรับ Model Minimalistic ที่ไม่ได้ระบุชื่อ ReLU และไม่สามารถ get_layer.output ได้ตรง ๆ
        หากไม่ใช้ให้ตั้ง First เป็น False
    '''
    if not first:
        #Depthwise Convolution
        x = layers.DepthwiseConv2D(
            kernel_size,
            padding="same",
            use_bias=False,
            name=prefix + "depthwise"
        )(x)
        x = layers.BatchNormalization(
            axis=channel_axis,
            epsilon=EPSILON_BN,
            momentum=MOMENTUM_BN,
            name=prefix + "depthwise_bn"
        )(x)
        x = activation(x)
    else:
        if use_activation:
            x = activation(x)

    #Projection Phase
    if reduction > 1:
        x = layers.Conv2D(
            int(round(infilters / reduction)),
            kernel_size=1,
            padding="same",
            use_bias=False,
            name=prefix + "project"
        )(x)
        x = layers.BatchNormalization(
            axis=channel_axis,
            epsilon=EPSILON_BN,
            momentum=MOMENTUM_BN,
            name=prefix + "project_bn"
        )(x)

    #Expansion Phase
    x = layers.Conv2D(
        outfilters,
        kernel_size=1,
        padding="same",
        use_bias=False,
        name=prefix + "expand"
    )(x)
    x = layers.BatchNormalization(
        axis=channel_axis,
        epsilon=EPSILON_BN,
        momentum=MOMENTUM_BN,
        name=prefix + "expand_bn"
    )(x)
    x = activation(x)

    #Depthwise Convolution
    if stride == 2:
        x = layers.ZeroPadding2D(
            padding = ((0, 1), (0, 1)), name=prefix + "depthwise_1_pad")(x)

    x = layers.DepthwiseConv2D(
        kernel_size,
        strides=stride,
        padding="same" if stride == 1 else "valid",
        use_bias=False,
        name=prefix + "depthwise_1"
    )(x)
    x = layers.BatchNormalization(
        axis=channel_axis,
        epsilon=EPSILON_BN,
        momentum=MOMENTUM_BN,
        name=prefix + "depthwise_1_bn"
    )(x)

    #Squeeze and Excitation
    if se_ratio:
        x = se_block(x, outfilters, se_ratio, prefix)

    if stride == 1 and infilters == outfilters:
        x = layers.Add(name=prefix + "add")([shortcut, x])
    return x

'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model Selection Function<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'

def build_model(model_name, input_shape=(224, 224, 3), num_classes=1000):
    if len(input_shape) != 3 or input_shape[2] not in [1, 3]:
        raise ValueError("Input shape must be a tuple (height, width, channels) with channels=1 or 3.")

    def freeze_layers(base_model):
        for layer in base_model.layers:
            layer.trainable = False

    if model_name == "MobileNetV3Small":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet',
        )
        freeze_layers(base_model)
        x = layers.GlobalAveragePooling2D(name="avg_pool")(base_model.output)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model

    elif model_name == "MobileNetV3SmallMinimalistic":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet',
            minimalistic=True
        )
        freeze_layers(base_model)
        x = layers.GlobalAveragePooling2D(name="avg_pool")(base_model.output)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model

    elif model_name == "MobileNetV3SmallMinimalistic_Modify_A":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet',
            minimalistic=True
        )
        freeze_layers(base_model)

        name_string = "expanded_conv_8_depthwise_bn"

        x = base_model.get_layer(name_string).output
        x = sandglass_modify(x, outfilters=depth(288, 8), reduction=3, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=1, first=True, use_activation=True)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=3, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=2)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=6, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=3)

        x = layers.GlobalAveragePooling2D(name="avg_pool")(x)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model
    
    elif model_name == "MobileNetV3SmallMinimalistic_Modify_B":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet',
            minimalistic=True
        )
        freeze_layers(base_model)

        name_string = "expanded_conv_8_project_bn"

        x = base_model.get_layer(name_string).output
        # Without reduction phase for first block
        x = sandglass_modify(x, outfilters=depth(288, 8), reduction=0, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=1, first=True, use_activation=False)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=3, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=2)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=6, kernel_size=3, stride=1, se_ratio=None, activation=relu, block_id=3)

        x = layers.GlobalAveragePooling2D(name="avg_pool")(x)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model

    elif model_name == "MobileNetV3Small_Modify_A":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet'
        )
        freeze_layers(base_model)

        name_string = "expanded_conv_8_depthwise_bn"

        x = base_model.get_layer(name_string).output

        x = sandglass_modify(x, outfilters=depth(288, 8), reduction=3, kernel_size=5, stride=1, se_ratio=0.25, activation=hard_swish, block_id=1, first=True, use_activation=True)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=3, kernel_size=5, stride=1, se_ratio=0.25, activation=hard_swish, block_id=2)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=6, kernel_size=5, stride=1, se_ratio=0.25, activation=hard_swish, block_id=3)

        x = layers.GlobalAveragePooling2D(name="avg_pool")(x)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model

    elif model_name == "MobileNetV3Small_Modify_B":
        base_model = keras.applications.MobileNetV3Small(
            input_shape=input_shape,
            include_top=False,
            weights='imagenet'
        )
        freeze_layers(base_model)

        name_string = "expanded_conv_8_project_bn"

        x = base_model.get_layer(name_string).output

        # Without reduction phase for first block
        x = sandglass_modify(x, outfilters=depth(288, 8), reduction=0, kernel_size=5, stride=1, se_ratio=0.25, activation=hard_swish, block_id=1, first=True, use_activation=False)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=3, kernel_size=5, stride=1, se_ratio=0.25, activation=hard_swish, block_id=2)
        x = sandglass_modify(x, outfilters=depth(576, 8), reduction=6, kernel_size=5, stride=1, se_ratio=None, activation=hard_swish, block_id=3)

        x = layers.GlobalAveragePooling2D(name="avg_pool")(x)
        predictions = layers.Dense(num_classes, activation='softmax', name='Predictions')(x)
        model = keras.Model(inputs=base_model.input, outputs=predictions)

        return model

    else:
        raise ValueError(f"Model '{model_name}' is not recognized.")